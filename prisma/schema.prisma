generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}
enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

model Post {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  content String

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model User {
  id             String             @id @default(uuid())
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  name           String
  email          String             @unique
  emailVerified  Boolean
  image          String?
  role           UserRole           @default(USER)

  banned         Boolean?           @default(false)
  banReason      String?
  banExpires     DateTime?

  sessions       Session[]
  accounts       Account[]
  posts          Post[]
  reviews        Review[]           @relation("UserReviews")
  orders         Order[]

  shop           Shop?              

  shopApplications ShopApplication[]
  reviewedApplications ShopApplication[] @relation("ReviewedBy") // ðŸ‘ˆ Add this line

  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  expiresAt DateTime
  token     String @unique
  ipAddress String?
  userAgent String?
  impersonatedBy String?

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  createdAt             DateTime
  updatedAt             DateTime
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Verification {
  id         String    @id @default(uuid())
  createdAt  DateTime?
  updatedAt  DateTime?

  identifier String
  value      String
  expiresAt  DateTime

  @@map("verifications")
}

model Shop {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  name        String
  slug        String @unique
  email       String   @unique
  phone       String?
  image       String?
  coverImage  String?     // for banners or shop covers
  description String?

  address     String?
  city        String?
  province    String?
  postalCode  String?
  country     String?

  rating      Float    @default(0)
  isVerified  Boolean  @default(false)
  isActive    Boolean  @default(true)

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String @unique   // âœ… Ensures one shop per user


  products    Product[]                 // relation to products
  orders      Order[]                   // relation to orders
  reviews     Review[]                  // optional: from customers
}

model Product {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  name        String
  slug      String   @unique 
  description String?
  image       String?
  price       Float
  stock       Int       @default(0)
  isActive    Boolean   @default(true)

  shopId      String
  shop        Shop      @relation(fields: [shopId], references: [id])

  orders      OrderItem[]
  reviews     Review[]
}

model Order {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())

  userId      String     // the buyer
  user        User       @relation(fields: [userId], references: [id])

  shopId      String
  shop        Shop       @relation(fields: [shopId], references: [id])

  items       OrderItem[]
  totalAmount Float
  status      String     // pending, shipped, delivered, etc.
}
model OrderItem {
  id        String   @id @default(uuid())

  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])

  productId String
  product   Product  @relation(fields: [productId], references: [id])

  quantity  Int
  price     Float
}
model Review {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  rating    Float
  comment   String?

  userId    String
  user   User @relation("UserReviews", fields: [userId], references: [id])

  productId String?
  product   Product? @relation(fields: [productId], references: [id])

  shopId    String?
  shop      Shop?    @relation(fields: [shopId], references: [id])
}

model ShopApplication {
  id            String           @id @default(uuid())
  createdAt     DateTime         @default(now())
  status        ApplicationStatus @default(PENDING)

  shopName      String
  image         String?
  phone         String?
  description   String?
  address       String?
  city          String?
  province      String?
  postalCode    String?
  country       String?

  userId        String
  user          User             @relation(fields: [userId], references: [id])

  reviewedById  String?
  reviewedBy    User?            @relation("ReviewedBy", fields: [reviewedById], references: [id])
}




